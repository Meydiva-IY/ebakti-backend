{"version":3,"sources":["period.js"],"names":["express","require","router","Router","get","req","res","db","query","err","results","console","error","status","json","message","post","_req$body","body","period_name","start_date","end_date","result","insertId","put","params","_req$body2","id","affectedRows","module","exports"],"mappings":"aAAA,IAAMA,QAAUC,QAAQ,WAClBC,OAASF,QAAQG,SADjBH,GAAOC,QAAGA,gBAKhBC,OAAOE,IAAI,IAAK,SAACC,EAAKC,GAHhBC,GAAEC,MAAGP,uBAEX,SAAAQ,EAAAC,GAGQ,GAAID,EAFD,OAGCE,QAAQC,MAAMH,GAHVH,EAAAO,OAAA,KAAAC,KAAc,CAAAC,QAAA,0BAElBN,EAAJK,KAASJ,OAGRR,OAAAc,KAAA,IAAA,SAAAX,EAAAC,GAAA,IAAAW,EAOyCZ,EAAIa,KAA1CC,EAPHF,EAOGE,YAAaC,EAPhBH,EAOgBG,WAAYC,EAP5BJ,EAO4BI,SAXjCd,GAAAC,MAKaE,0EALb,CAAAS,EAAAC,EAAAC,GAAA,SAAAZ,EAAAa,GASJ,GAAAb,EACY,OAKAE,QAAQC,MAAMH,GALTH,EAAAO,OAAA,KAAAC,KAAc,CAAAC,QAAA,0BACnBI,EAAAA,OADmB,KAAAL,KAAA,CACnBK,GAAAA,EADmBI,SAAAJ,YAAAA,EAAAC,WAAAA,EAAAC,SAAAA,QAIvBnB,OAAAsB,IAAA,OAAS,SAAAnB,EAAAC,GAAA,IACLK,EAAAN,EAAAoB,OAAAd,GADKe,EAEuBrB,EAAAa,KAA5BC,EAFKO,EAELP,YAAkBC,EAFbM,EAEaN,WAAUC,EAFvBK,EAEuBL,SAAAd,GAArBC,MAA8B,sFAArC,CAAAW,EAAAC,EAAAC,EAAAM,GAAA,SAAAlB,EAAAa,GACH,OAAAb,GAYGE,QAAQC,MAAMH,GAXlBH,EAAgBQ,OAAK,KAAAA,KAAA,CAAAC,QAAA,2BAAA,IAAuBI,EAAAA,aAAaC,EAAAA,OAApC,KAAAN,KAAA,CAAAC,QAAA,0BAArBT,EAAAQ,KAAA,CAAAC,QAAA,oCAKyBb,OACrByB,OAAU,OAAVA,SAAAA,EADqBrB,GAAA,IAAAqB,EAEiBtB,EAAIa,OAFrBS,GAAApB,GAERa,MAAbD,yCAFqB,CAAAQ,GAAA,SAAAlB,EAERW,GAAYC,OAAAA,GACrBV,QAAAC,MAAAH,GACGU,EAAAA,OAAaC,KAAAA,KAAd,CAA0BC,QAA1B,2BAEN,IAAAV,EAAAiB,aACWf,EAAJA,OAAgBC,KAAKA,KAAA,CAAAC,QAAA,0BAA5BT,EAAAQ,KAAA,CAAAC,QAAA,oCAGAc,OAAAC,QAAWjB","file":"period.min.js","sourcesContent":["const express = require('express');\r\nconst router = express.Router();\r\nconst db = require('../config/db');\r\n\r\n// Get all periods\r\nrouter.get('/', (req, res) => {\r\n    db.query('SELECT * FROM Period', (err, results) => {\r\n        if (err) {\r\n            console.error(err);\r\n            return res.status(500).json({ message: 'Internal Server Error' });\r\n        }\r\n        res.json(results);\r\n    });\r\n});\r\n\r\n// Create a new period\r\nrouter.post('/', (req, res) => {\r\n    const { period_name, start_date, end_date } = req.body;\r\n    const sql = 'INSERT INTO Period (period_name, start_date, end_date) VALUES (?, ?, ?)';\r\n    db.query(sql, [period_name, start_date, end_date], (err, result) => {\r\n        if (err) {\r\n            console.error(err);\r\n            return res.status(400).json({ message: 'Error creating period' });\r\n        }\r\n        res.status(201).json({ id: result.insertId, period_name, start_date, end_date });\r\n    });\r\n});\r\n\r\n// Update a period\r\nrouter.put('/:id', (req, res) => {\r\n    const { id } = req.params;\r\n    const { period_name, start_date, end_date } = req.body;\r\n    const sql = 'UPDATE Period SET period_name = ?, start_date = ?, end_date = ? WHERE period_id = ?';\r\n    db.query(sql, [period_name, start_date, end_date, id], (err, result) => {\r\n        if (err) {\r\n            console.error(err);\r\n            return res.status(400).json({ message: 'Error updating period' });\r\n        }\r\n        if (result.affectedRows === 0) {\r\n            return res.status(404).json({ message: 'Period not found' });\r\n        }\r\n        res.json({ message: 'Period updated successfully' });\r\n    });\r\n});\r\n\r\n// Delete a period\r\nrouter.delete('/:id', (req, res) => {\r\n    const { id } = req.params;\r\n    const sql = 'DELETE FROM Period WHERE period_id = ?';\r\n    db.query(sql, [id], (err, result) => {\r\n        if (err) {\r\n            console.error(err);\r\n            return res.status(400).json({ message: 'Error deleting period' });\r\n        }\r\n        if (result.affectedRows === 0) {\r\n            return res.status(404).json({ message: 'Period not found' });\r\n        }\r\n        res.json({ message: 'Period deleted successfully' });\r\n    });\r\n});\r\n\r\nmodule.exports = router;"]}