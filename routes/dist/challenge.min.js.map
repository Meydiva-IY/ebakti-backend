{"version":3,"sources":["challenge.js"],"names":["express","require","router","Router","get","req","res","db","query","err","results","console","error","status","json","message","post","_req$body","body","title","description","due_date","clg_pic","result","id","insertId","sql","params","affectedRows","module","exports"],"mappings":"aAAA,IAAMA,QAAUC,QAAQ,WAClBC,OAASF,QAAQG,SADjBH,GAAOC,QAAGA,gBAKhBC,OAAOE,IAAI,IAAK,SAACC,EAAKC,GAHhBC,GAAEC,MAAGP,0BAEX,SAAAQ,EAAAC,GAGQ,GAAID,EAFD,OAGCE,QAAQC,MAAMH,GAHVH,EAAAO,OAAA,KAAAC,KAAc,CAAAC,QAAA,0BAElBN,EAAJK,KAASJ,OAGRR,OAAAc,KAAA,IAAA,SAAAX,EAAAC,GAAA,IAAAW,EAO6CZ,EAAIa,KAA9CC,EAPHF,EAOGE,MAAOC,EAPVH,EAOUG,YAAaC,EAPvBJ,EAOuBI,SAAUC,EAPjCL,EAOiCK,QAXtCf,GAAAC,MAKaE,oFALb,CAAAS,EAAAC,EAAAC,EAAAC,GAAA,SAAAb,EAAAc,GASJ,GAAAd,EACY,OAKAE,QAAQC,MAAMH,GALTH,EAAAO,OAAA,KAAAC,KAAc,CAAAC,QAAA,6BACnBI,EADmBN,OAAA,KACnBM,KADmB,CAAAK,GAAAD,EAAAE,SAAAN,MAAAA,EAAAC,YAAAA,EAAAC,SAAAA,EAAAC,QAAAA,QAG3Bf,OAAGC,IAAMkB,OAAMP,SAAAA,EAAOC,GAAAA,IAClBI,EAASnB,EAAAsB,OAATH,GADkBJ,EAEdf,EAAAa,KAAAP,EAFcS,EAEdT,MAAAS,EAFcA,EAEdA,YAAAC,EAFcD,EAEdC,SAAAC,EAFcF,EAEdE,QAC8BP,GAAAA,MAApB,oGAA6B,CAAAI,EAAAC,EAAAC,EAAAC,EAAAE,GAAA,SAAAf,EAAAc,GAAvC,OAAAd,GACHE,QAAAC,MAAAH,GAaUH,EAAIO,OAAO,KAAKC,KAAK,CAAEC,QAAS,8BAZtB,IAAMQ,EAAOE,aAAbnB,EAAAO,OAAA,KAAAC,KAAA,CAAAC,QAAA,6BAA2CM,EAAAA,KAAAA,CAAAA,QAA3C,uCAsB7BnB,OAAM,OAAQ,OAAQ,SAACG,EAAKC,GAAQ,IAjBzBkB,EAAQnB,EAAAsB,OAARH,GAAsBjB,GAAAC,MACVmB,+CADU,CAEqBtB,GAAIa,SAAAA,EAFzBK,GAErBJ,OAFqBV,GAEdW,QAFcR,MAAAH,GAAAH,EAAAO,OAEDQ,KAAAA,KAFC,CAAAN,QAAA,8BAGjB,IAAAQ,EAAAK,aACGT,EAADN,OAAQO,KAARN,KAAqBO,CAAAA,QAAUC,6BAErCX,EAAAA,KAAQC,CAARG,QAAA,uCAEHc,OAAAC,QAAA5B","file":"challenge.min.js","sourcesContent":["const express = require('express');\r\nconst router = express.Router();\r\nconst db = require('../config/db');\r\n\r\n// Get all challenges\r\nrouter.get('/', (req, res) => {\r\n    db.query('SELECT * FROM Challenge', (err, results) => {\r\n        if (err) {\r\n            console.error(err);\r\n            return res.status(500).json({ message: 'Internal Server Error' });\r\n        }\r\n        res.json(results);\r\n    });\r\n});\r\n\r\n// Create a new challenge\r\nrouter.post('/', (req, res) => {\r\n    const { title, description, due_date, clg_pic } = req.body;\r\n    const sql = 'INSERT INTO Challenge (title, description, due_date, clg_pic) VALUES (?, ?, ?, ?)';\r\n    db.query(sql, [title, description, due_date, clg_pic], (err, result) => {\r\n        if (err) {\r\n            console.error(err);\r\n            return res.status(400).json({ message: 'Error creating challenge' });\r\n        }\r\n        res.status(201).json({ id: result.insertId, title, description, due_date, clg_pic });\r\n    });\r\n});\r\n\r\n// Update a challenge\r\nrouter.put('/:id', (req, res) => {\r\n    const { id } = req.params;\r\n    const { title, description, due_date, clg_pic } = req.body;\r\n    const sql = 'UPDATE Challenge SET title = ?, description = ?, due_date = ?, clg_pic = ? WHERE challenge_id = ?';\r\n    db.query(sql, [title, description, due_date, clg_pic, id], (err, result) => {\r\n        if (err) {\r\n            console.error(err);\r\n            return res.status(400).json({ message: 'Error updating challenge' });\r\n        }\r\n        if (result.affectedRows === 0) {\r\n            return res.status(404).json({ message: 'Challenge not found' });\r\n        }\r\n        res.json({ message: 'Challenge updated successfully' });\r\n    });\r\n});\r\n\r\n// Delete a challenge\r\nrouter.delete('/:id', (req, res) => {\r\n    const { id } = req.params;\r\n    const sql = 'DELETE FROM Challenge WHERE challenge_id = ?';\r\n    db.query(sql, [id], (err, result) => {\r\n        if (err) {\r\n            console.error(err);\r\n            return res.status(400).json({ message: 'Error deleting challenge' });\r\n        }\r\n        if (result.affectedRows === 0) {\r\n            return res.status(404).json({ message: 'Challenge not found' });\r\n        }\r\n        res.json({ message: 'Challenge deleted successfully' });\r\n    });\r\n});\r\n\r\nmodule.exports = router;"]}