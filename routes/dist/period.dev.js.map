{"version":3,"sources":["period.js"],"names":["express","require","router","Router","db","get","req","res","query","err","results","console","error","status","json","message","post","body","period_name","start_date","end_date","sql","result","id","insertId","put","params","affectedRows","module","exports"],"mappings":";;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAMC,MAAM,GAAGF,OAAO,CAACG,MAAR,EAAf;;AACA,IAAMC,EAAE,GAAGH,OAAO,CAAC,cAAD,CAAlB,C,CAEA;;;AACAC,MAAM,CAACG,GAAP,CAAW,GAAX,EAAgB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC1BH,EAAAA,EAAE,CAACI,KAAH,CAAS,sBAAT,EAAiC,UAACC,GAAD,EAAMC,OAAN,EAAkB;AAC/C,QAAID,GAAJ,EAAS;AACLE,MAAAA,OAAO,CAACC,KAAR,CAAcH,GAAd;AACA,aAAOF,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAArB,CAAP;AACH;;AACDR,IAAAA,GAAG,CAACO,IAAJ,CAASJ,OAAT;AACH,GAND;AAOH,CARD,E,CAUA;;AACAR,MAAM,CAACc,IAAP,CAAY,GAAZ,EAAiB,UAACV,GAAD,EAAMC,GAAN,EAAc;AAAA,kBACmBD,GAAG,CAACW,IADvB;AAAA,MACnBC,WADmB,aACnBA,WADmB;AAAA,MACNC,UADM,aACNA,UADM;AAAA,MACMC,QADN,aACMA,QADN;AAE3B,MAAMC,GAAG,GAAG,yEAAZ;AACAjB,EAAAA,EAAE,CAACI,KAAH,CAASa,GAAT,EAAc,CAACH,WAAD,EAAcC,UAAd,EAA0BC,QAA1B,CAAd,EAAmD,UAACX,GAAD,EAAMa,MAAN,EAAiB;AAChE,QAAIb,GAAJ,EAAS;AACLE,MAAAA,OAAO,CAACC,KAAR,CAAcH,GAAd;AACA,aAAOF,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAArB,CAAP;AACH;;AACDR,IAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAES,MAAAA,EAAE,EAAED,MAAM,CAACE,QAAb;AAAuBN,MAAAA,WAAW,EAAXA,WAAvB;AAAoCC,MAAAA,UAAU,EAAVA,UAApC;AAAgDC,MAAAA,QAAQ,EAARA;AAAhD,KAArB;AACH,GAND;AAOH,CAVD,E,CAYA;;AACAlB,MAAM,CAACuB,GAAP,CAAW,MAAX,EAAmB,UAACnB,GAAD,EAAMC,GAAN,EAAc;AAAA,MACrBgB,EADqB,GACdjB,GAAG,CAACoB,MADU,CACrBH,EADqB;AAAA,mBAEiBjB,GAAG,CAACW,IAFrB;AAAA,MAErBC,WAFqB,cAErBA,WAFqB;AAAA,MAERC,UAFQ,cAERA,UAFQ;AAAA,MAEIC,QAFJ,cAEIA,QAFJ;AAG7B,MAAMC,GAAG,GAAG,qFAAZ;AACAjB,EAAAA,EAAE,CAACI,KAAH,CAASa,GAAT,EAAc,CAACH,WAAD,EAAcC,UAAd,EAA0BC,QAA1B,EAAoCG,EAApC,CAAd,EAAuD,UAACd,GAAD,EAAMa,MAAN,EAAiB;AACpE,QAAIb,GAAJ,EAAS;AACLE,MAAAA,OAAO,CAACC,KAAR,CAAcH,GAAd;AACA,aAAOF,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAArB,CAAP;AACH;;AACD,QAAIO,MAAM,CAACK,YAAP,KAAwB,CAA5B,EAA+B;AAC3B,aAAOpB,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAArB,CAAP;AACH;;AACDR,IAAAA,GAAG,CAACO,IAAJ,CAAS;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAT;AACH,GATD;AAUH,CAdD,E,CAgBA;;AACAb,MAAM,UAAN,CAAc,MAAd,EAAsB,UAACI,GAAD,EAAMC,GAAN,EAAc;AAAA,MACxBgB,EADwB,GACjBjB,GAAG,CAACoB,MADa,CACxBH,EADwB;AAEhC,MAAMF,GAAG,GAAG,wCAAZ;AACAjB,EAAAA,EAAE,CAACI,KAAH,CAASa,GAAT,EAAc,CAACE,EAAD,CAAd,EAAoB,UAACd,GAAD,EAAMa,MAAN,EAAiB;AACjC,QAAIb,GAAJ,EAAS;AACLE,MAAAA,OAAO,CAACC,KAAR,CAAcH,GAAd;AACA,aAAOF,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAArB,CAAP;AACH;;AACD,QAAIO,MAAM,CAACK,YAAP,KAAwB,CAA5B,EAA+B;AAC3B,aAAOpB,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAArB,CAAP;AACH;;AACDR,IAAAA,GAAG,CAACO,IAAJ,CAAS;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAT;AACH,GATD;AAUH,CAbD;AAeAa,MAAM,CAACC,OAAP,GAAiB3B,MAAjB","sourcesContent":["const express = require('express');\r\nconst router = express.Router();\r\nconst db = require('../config/db');\r\n\r\n// Get all periods\r\nrouter.get('/', (req, res) => {\r\n    db.query('SELECT * FROM Period', (err, results) => {\r\n        if (err) {\r\n            console.error(err);\r\n            return res.status(500).json({ message: 'Internal Server Error' });\r\n        }\r\n        res.json(results);\r\n    });\r\n});\r\n\r\n// Create a new period\r\nrouter.post('/', (req, res) => {\r\n    const { period_name, start_date, end_date } = req.body;\r\n    const sql = 'INSERT INTO Period (period_name, start_date, end_date) VALUES (?, ?, ?)';\r\n    db.query(sql, [period_name, start_date, end_date], (err, result) => {\r\n        if (err) {\r\n            console.error(err);\r\n            return res.status(400).json({ message: 'Error creating period' });\r\n        }\r\n        res.status(201).json({ id: result.insertId, period_name, start_date, end_date });\r\n    });\r\n});\r\n\r\n// Update a period\r\nrouter.put('/:id', (req, res) => {\r\n    const { id } = req.params;\r\n    const { period_name, start_date, end_date } = req.body;\r\n    const sql = 'UPDATE Period SET period_name = ?, start_date = ?, end_date = ? WHERE period_id = ?';\r\n    db.query(sql, [period_name, start_date, end_date, id], (err, result) => {\r\n        if (err) {\r\n            console.error(err);\r\n            return res.status(400).json({ message: 'Error updating period' });\r\n        }\r\n        if (result.affectedRows === 0) {\r\n            return res.status(404).json({ message: 'Period not found' });\r\n        }\r\n        res.json({ message: 'Period updated successfully' });\r\n    });\r\n});\r\n\r\n// Delete a period\r\nrouter.delete('/:id', (req, res) => {\r\n    const { id } = req.params;\r\n    const sql = 'DELETE FROM Period WHERE period_id = ?';\r\n    db.query(sql, [id], (err, result) => {\r\n        if (err) {\r\n            console.error(err);\r\n            return res.status(400).json({ message: 'Error deleting period' });\r\n        }\r\n        if (result.affectedRows === 0) {\r\n            return res.status(404).json({ message: 'Period not found' });\r\n        }\r\n        res.json({ message: 'Period deleted successfully' });\r\n    });\r\n});\r\n\r\nmodule.exports = router;"],"file":"period.dev.js"}