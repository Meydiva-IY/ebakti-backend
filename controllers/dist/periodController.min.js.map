{"version":3,"sources":["periodController.js"],"names":["db","require","periodController","create","req","res","_req$body","period_name","start_date","end_date","_ref","_ref2","result","regeneratorRuntime","async","_context","prev","next","body","awrap","query","sent","_slicedToArray","status","json","id","insertId","t0","error","message","stop","getAll","_ref3","_ref4","periods","_context2","module","exports"],"mappings":"mnBACA,IAAMA,GAAKC,QAAQ,gBAEbC,iBAAmB,CACrBC,OAAQ,SAAOC,EAAKC,GAAZ,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAC,KAAA,EAAAV,EAE8CF,EAAIc,KAA1CX,EAFRD,EAEQC,YAAaC,EAFrBF,EAEqBE,WAAYC,EAFjCH,EAEiCG,SAFjCM,EAAAE,KAAA,EAAAJ,mBAAAM,MAGuBnB,GAAGoB,MACtB,0EACA,CAACb,EAAaC,EAAYC,KAL9B,KAAA,EAAAC,EAAAK,EAAAM,KAAAV,EAAAW,eAAAZ,EAAA,GAGOE,EAHPD,EAAA,GAHDV,EAAOsB,OAAC,KAAAC,KAAnB,CAAAC,GAAAb,EAAAc,WAGYX,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAY,GAAAZ,EAAA,MAAA,GADNb,EAAAA,OAAmB,KAAAsB,KAAA,CAAAI,MAAAb,EAAAY,GAAAE,UACb,KAAA,GAAA,IAAA,MAAA,OAAAd,EAAAe,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAAAC,OAAA,SAAA3B,EAAAC,GAAA,IAAA2B,EAAAC,EAAAC,EAAA,OAAArB,mBAAAC,MAAA,SAAAqB,GAAA,OAAA,OAAAA,EAAAnB,KAAAmB,EAAAlB,MAAA,KAAA,EAAA,OAAAkB,EAAAnB,KAAA,EAAAmB,EAAAlB,KAAA,EAAAJ,mBAAAM,MAAAnB,GAAAoB,MAAA,yBAAA,KAAA,EAAAY,EAAAG,EAAAd,KAAAY,EAAAX,eAAAU,EAAA,GAAAE,EAAAD,EAAA,GAAA5B,EAAAmB,KAAAU,GAAAC,EAAAlB,KAAA,GAAA,MAAA,KAAA,EAAAkB,EAAAnB,KAAA,EAAAmB,EAAAR,GAAAQ,EAAA,MAAA,GAAA9B,EAAAkB,OAAA,KAEkDL,KAFlD,CAEQX,MAAAA,EAAAA,GAFRsB,UAAA,KAAA,GAAA,IAAA,MAAA,OAAAM,EAAAL,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAAAM,OAAAC,QAAA,CAAAnC,iBAAAA","file":"periodController.min.js","sourcesContent":["// periodController.js\r\nconst db = require('../config/db');\r\n\r\nconst periodController = {\r\n    create: async (req, res) => {\r\n        try {\r\n            const { period_name, start_date, end_date } = req.body;\r\n            const [result] = await db.query(\r\n                'INSERT INTO period (period_name, start_date, end_date) VALUES (?, ?, ?)',\r\n                [period_name, start_date, end_date]\r\n            );\r\n            res.status(201).json({ id: result.insertId });\r\n        } catch (error) {\r\n            res.status(500).json({ error: error.message });\r\n        }\r\n    },\r\n\r\n    getAll: async (req, res) => {\r\n        try {\r\n            const [periods] = await db.query('SELECT * FROM period');\r\n            res.json(periods);\r\n        } catch (error) {\r\n            res.status(500).json({ error: error.message });\r\n        }\r\n    }\r\n};\r\n\r\nmodule.exports = { periodController }; // Pastikan ini ada"]}