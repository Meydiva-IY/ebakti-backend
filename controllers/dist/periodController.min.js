"use strict";function _slicedToArray(e,r){return _arrayWithHoles(e)||_iterableToArrayLimit(e,r)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}function _iterableToArrayLimit(e,r){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)){var t=[],n=!0,a=!1,o=void 0;try{for(var i,s=e[Symbol.iterator]();!(n=(i=s.next()).done)&&(t.push(i.value),!r||t.length!==r);n=!0);}catch(e){a=!0,o=e}finally{try{n||null==s.return||s.return()}finally{if(a)throw o}}return t}}function _arrayWithHoles(e){if(Array.isArray(e))return e}var db=require("../config/db"),periodController={create:function(r,t){var n,a,o,i,s,u,c;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,n=r.body,a=n.period_name,o=n.start_date,i=n.end_date,e.next=4,regeneratorRuntime.awrap(db.query("INSERT INTO period (period_name, start_date, end_date) VALUES (?, ?, ?)",[a,o,i]));case 4:s=e.sent,u=_slicedToArray(s,1),c=u[0],t.status(201).json({id:c.insertId}),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(0),t.status(500).json({error:e.t0.message});case 13:case"end":return e.stop()}},null,null,[[0,10]])},getAll:function(e,r){var t,n,a;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,regeneratorRuntime.awrap(db.query("SELECT * FROM period"));case 3:t=e.sent,n=_slicedToArray(t,1),a=n[0],r.json(a),e.next=12;break;case 9:e.prev=9,e.t0=e.catch(0),r.status(500).json({error:e.t0.message});case 12:case"end":return e.stop()}},null,null,[[0,9]])}};module.exports={periodController:periodController};
//# sourceMappingURL=periodController.min.js.map
